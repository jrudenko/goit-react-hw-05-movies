{"version":3,"file":"static/js/904.9d478934.chunk.js","mappings":"sIAAA,SAASA,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOC,GAEP,YADAP,EAAOO,EAET,CAEIF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOI,KAAKT,EAAOC,EAEvC,C,gHCqEA,EAtC4B,WAE1B,IAAQS,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAAsDE,EAAAA,EAAAA,UAAS,MAA/D,eAAOC,EAAP,KAA4BC,EAA5B,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAON,EAAP,KAAcS,EAAd,KAcA,OAZAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,eDrCoBC,ECqCpB,GDrCoBA,ECqCpB,UAAG,8GAECC,EAAAA,EAAAA,IAAuBT,GAFxB,OAEXU,EAFW,OAGjBN,EAAuBM,GAHN,gDAKjBL,EAAS,EAAD,IALS,wDDpChB,WACL,IAAIM,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIhB,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMqB,EAAGO,MAAMJ,EAAME,GAEzB,SAASvB,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOyB,GACd9B,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASyB,EACnE,CAEA1B,OAAM2B,EACR,GACF,GCoBoB,qDAQlBV,GACD,GAAE,CAACP,KAGF,gCACGJ,IAAS,yBAAMA,KAChB,wBACGO,EAAoBe,KAAI,SAAAC,GACvB,IAAQC,EAAwBD,EAAxBC,GAAIC,EAAoBF,EAApBE,OAAQC,EAAYH,EAAZG,QAEpB,OACE,2BACC,oCAAYD,MACZ,uBAAIC,MAFIF,EAKZ,QAIR,C,uJCjFD,IAAMG,EAAW,gCACXC,EAAU,mCAET,SAASC,IACd,OAAOC,MAAM,GAAD,OAAIH,EAAJ,oCAAwCC,IAC/CzB,MAAK,SAAAW,GAAG,OAAIA,EAAIiB,MAAR,IACR5B,MAAK,SAAAW,GAAG,OAAIA,EAAIkB,OAAR,GACd,CAEM,SAASC,EAAgBC,GAC9B,OAAOJ,MAAM,GAAD,OAAIH,EAAJ,gCAAoCC,EAApC,kBAAqDM,IAC5D/B,MAAK,SAAAW,GAAG,OAAIA,EAAIiB,MAAR,IACR5B,MAAK,SAAAW,GAAG,OAAIA,EAAIkB,OAAR,GACd,CAEM,SAASG,EAAgB/B,GAC9B,OAAO0B,MAAM,GAAD,OAAIH,EAAJ,kBAAsBvB,EAAtB,oBAAyCwB,IAClDzB,MAAK,SAAAW,GAAG,OAAIA,EAAIiB,MAAR,GACZ,CAEM,SAASK,EAAoBhC,GAClC,OAAO0B,MAAM,GAAD,OAAIH,EAAJ,kBAAsBvB,EAAtB,4BAAiDwB,IACxDzB,MAAK,SAAAW,GAAG,OAAIA,EAAIiB,MAAR,IACR5B,MAAK,SAAAW,GAAG,OAAIA,EAAIkB,OAAR,GACd,CAEM,SAASnB,EAAuBT,GACrC,OAAO0B,MAAM,GAAD,OAAIH,EAAJ,kBAAsBvB,EAAtB,4BAAiDwB,IACxDzB,MAAK,SAAAW,GAAG,OAAIA,EAAIiB,MAAR,IACR5B,MAAK,SAAAW,GAAG,OAAIA,EAAIkB,OAAR,GACd,C","sources":["../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","components/MovieDetailsReviews/MovieDetailsReviews.jsx","services/API.jsx"],"sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { getMovieDetailsReviews } from \"../../services/API\";\n\n\n// const MovieDetailsReviews = () => {\n//   const { movieId } = useParams();\n//   const [movieDetailsReviews, setMovieDetailsReviews] = useState(null);\n\n//   useEffect(() => {\n//     getMovieDetailsReviews(movieId)\n//       .then(res => {\n//         if (res.total_results) {\n//           setMovieDetailsReviews(res.results); \n//         }\n//       })\n//       .catch(error => console.log(error));\n//   }, [movieId]);\n  \n//   if (!movieDetailsReviews) {\n//     return <p>Sorry, but we don't have any reviews on this movie</p>;\n//   };\n\n//   return (\n//     <>\n//       <ul>\n//         {movieDetailsReviews.map(item => {\n//           const { id, author, content } = item;\n          \n//           return (\n//             <li key={id}>\n//               <p>Author: {author}</p>\n//               <p>{content}</p>\n//             </li>\n//           )}\n//         )}\n//       </ul>\n//     </>\n    \n//   );\n// };  \n\n// export default MovieDetailsReviews;\n\nconst MovieDetailsReviews = () => {\n  \n  const { movieId } = useParams();\n\n  const [movieDetailsReviews, setMovieDetailsReviews] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      try {\n        const res = await getMovieDetailsReviews(movieId);\n        setMovieDetailsReviews(res);\n      } catch (error) {\n        setError(error);\n      }\n    };\n    fetchReviews();\n  }, [movieId]);\n\n  return (\n    <>\n      {error && <div>{error}</div>}\n      <ul>\n        {movieDetailsReviews.map(item => {\n          const { id, author, content } = item;\n          \n          return (\n            <li key={id}>\n             <p>Author: {author}</p>\n             <p>{content}</p>\n          </li>\n          );\n        })}\n      </ul>\n     </>\n  );\n};\n\nexport default MovieDetailsReviews;","const BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '94dbe73fcd84ac739d9a0f3a17326b65';\n\nexport function getTrendingMovies() {\n  return fetch(`${BASE_URL}trending/all/day?api_key=${API_KEY}`)\n      .then(res => res.json())\n      .then(res => res.results);\n};\n\nexport function getSearchMovies(searchQuery) {\n  return fetch(`${BASE_URL}search/movie?api_key=${API_KEY}&query=${searchQuery}`)\n      .then(res => res.json())\n      .then(res => res.results);\n};\n\nexport function getMovieDetails(movieId) {\n  return fetch(`${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`)\n    .then(res => res.json());\n};\n\nexport function getMovieDetailsCast(movieId) {\n  return fetch(`${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`)\n      .then(res => res.json())\n      .then(res => res.results);\n};\n\nexport function getMovieDetailsReviews(movieId) {\n  return fetch(`${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`)\n      .then(res => res.json())\n      .then(res => res.results);\n};"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","movieId","useParams","useState","movieDetailsReviews","setMovieDetailsReviews","setError","useEffect","fetchReviews","fn","getMovieDetailsReviews","res","self","this","args","arguments","apply","err","undefined","map","item","id","author","content","BASE_URL","API_KEY","getTrendingMovies","fetch","json","results","getSearchMovies","searchQuery","getMovieDetails","getMovieDetailsCast"],"sourceRoot":""}